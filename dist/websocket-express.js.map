{"version":3,"sources":["websockets-express.js"],"names":["global","$","buffer","ready","afterReady","Set","defaultSocketId","chars","split","endpoints","Map","callbacks","acknowledgements","sendQueue","sockets","parsers","status","SOCKETSTATUS","Object","freeze","CONNECTING","RECONNECTING","CLOSED","CONNECTED","HTTP_ERROR","message","params","Error","init","document","addEventListener","onReady","websocket","WebSocketService","angular","module","factory","bolt","BoltWebSocketService","setEndpoints","forEach","callback","clear","removeEventListener","setDefaultEndPoint","endpointLinkElements","querySelectorAll","length","n","url","getAttribute","trim","title","set","origin","location","baseElement","querySelector","base","replace","notEnum","enumeral","checks","_status","check","randomInt","end","start","Math","floor","random","randomString","Array","fill","map","join","createAcknowledge","resolve","reject","err","response","body","statusMessage","socketReady","socketId","has","undefined","ws","get","readyState","OPEN","runSendQueue","_sendQueue","send","messageFunction","delete","add","getCallbacks","type","removeCallback","setEnpointUrl","URIError","reconnect","setTimeout","console","log","WebSocket","connecting","drop","close","open","error","messageEvent","respond","id","data","acknowledgement","JSON","parse","Blob","reader","FileReader","onload","Buffer","Uint8Array","result","readAsArrayBuffer","connect","defaultJsonParser","stringify","TypeError","WebSocketServiceInstance","addParser","method","Promise","_message","request","parser","Symbol","toStringTag","window","jQuery"],"mappings":"ktGAAA,CAAA,SAAAA,MAAA,CAAAC,CAAA,CAAA,CACA,aAEA,GAAAC,QAAAF,OAAAE,MAAA,CACA,GAAAC,OAAA,KAAA,CAEA,GAAAC,YAAA,GAAAC,IAAA,EAAA,CACA,GAAAC,iBAAA,MAAA,CACA,GAAAC,OAAA,gEAAAC,KAAA,CAAA,EAAA,CAAA,CACA,GAAAC,WAAA,GAAAC,IAAA,EAAA,CACA,GAAAC,WAAA,GAAAD,IAAA,EAAA,CACA,GAAAE,kBAAA,GAAAF,IAAA,EAAA,CACA,GAAAG,WAAA,GAAAH,IAAA,EAAA,CACA,GAAAI,SAAA,GAAAJ,IAAA,EAAA,CACA,GAAAK,SAAA,GAAAL,IAAA,EAAA,CACA,GAAAM,QAAA,GAAAN,IAAA,EAAA,CACA,GAAAO,cAAAC,OAAAC,MAAA,CAAA,CACAC,WAAA,CADA,CAEAC,aAAA,CAFA,CAGAC,OAAA,CAHA,CAIAC,UAAA,CAJA,CAAA,CAAA,CAhBA,GAuBAC,WAvBA,4DAwBA,oBAAAC,OAAA,CAAA,+FAAAC,MAAA,qDAAAA,MAAA,0BACA,uHAAAD,QAAAA,OAAA,SAAAC,MAAA,IACA,MAAAV,MAAA,CAAAS,QAAAT,MAAA,CAFA,aAGA,CA3BA,qCAuBAW,KAvBA,GA8BA;;IAGA,QAAAC,KAAA,EAAA,CACA5B,OAAA6B,QAAA,CAAAC,gBAAA,CAAA,kBAAA,CAAAC,OAAA,EACA,GAAA9B,CAAA,CAAAA,EAAA+B,SAAA,CAAA,GAAAC,iBAAA,EAAA,CACA,GAAAjC,OAAAkC,OAAA,CAAAlC,OAAAkC,OAAA,CAAAC,MAAA,CAAA,mBAAA,CAAA,EAAA,EAAAC,OAAA,CAAA,YAAA,CAAA,iBAAA,IAAAH,iBAAA,EAAA,EAAA,EAEA,GAAA,CAAAhC,CAAA,EAAA,CAAAD,OAAAkC,OAAA,CAAA,CACA,GAAAlC,OAAAqC,IAAA,CAAA,CACArC,OAAAqC,IAAA,CAAAJ,gBAAA,CAAAA,gBAAA,CACA,CAFA,IAEA,CACAjC,OAAAsC,oBAAA,CAAAL,gBAAA,CACA,CACA,CACA,CAEA;;IAGA,QAAAF,QAAA,EAAA,CACAQ,eACApC,MAAA,IAAA,CACAC,WAAAoC,OAAA,CAAA,yBAAAC,WAAA,EAAA,EACArC,WAAAsC,KAAA,GACA1C,OAAA6B,QAAA,CAAAc,mBAAA,CAAA,kBAAA,CAAAf,IAAA,EACA,CAGA;;;;IAKA,QAAAW,aAAA,EAAA,CACAK,qBAEA,GAAAC,sBAAA7C,OAAA6B,QAAA,CAAAiB,gBAAA,CAAA,oCAAA,CAAA,CACA,GAAAD,qBAAAE,MAAA,CAAA,CACA,IAAA,GAAAC,GAAA,CAAA,CAAAA,EAAAH,qBAAAE,MAAA,CAAAC,GAAA,CAAA,CACA,GAAAC,KAAA,CAAAJ,qBAAAG,CAAA,EAAAE,YAAA,CAAA,MAAA,GAAA,EAAA,EAAAC,IAAA,EAAA,CACA,GAAAF,MAAA,EAAA,CAAA,CACA,GAAAG,OAAA,CAAAP,qBAAAG,CAAA,EAAAE,YAAA,CAAA,OAAA,GAAA,EAAA,EAAAC,IAAA,EAAA,CACA,GAAAC,QAAA,EAAA,CAAAA,MAAA9C,eAAA,CACAG,UAAA4C,GAAA,CAAAD,KAAA,CAAAH,GAAA,EACA,CACA,CACA,CACA,CAEA;;IAGA,QAAAL,mBAAA,EAAA,CACA,GAAAU,QAAAtD,OAAAuD,QAAA,CAAAD,MAAA,CACA,GAAAE,aAAAxD,OAAA6B,QAAA,CAAA4B,aAAA,CAAA,YAAA,CAAA,CACA,GAAAR,IAAA,CACA,GAAAO,WAAA,CAAA,CACA,GAAAE,MAAA,CAAAF,YAAAN,YAAA,CAAA,MAAA,GAAA,EAAA,EAAAC,IAAA,GAAAQ,OAAA,CAAAL,MAAA,CAAA,EAAA,CAAA,CACA,GAAAI,OAAA,EAAA,CAAAT,IAAAK,OAAAI,IAAA,CACA,CAHA,IAGA,CACAT,IAAAK,OAAA,GAAA,CACA,CAEAL,IAAAA,IAAAU,OAAA,CAAA,UAAA,CAAA,QAAA,EAAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAEAlD,UAAA4C,GAAA,CAAA/C,eAAA,CAAA2C,GAAA,EACA,CAEA;;;;;;;IAQA,QAAAW,QAAA,CAAA5C,MAAA,CAAA6C,QAAA,CAAAC,MAAA,CAAA,CACA,GAAAC,SAAA,IAAA,CACAD,OAAAtB,OAAA,CAAA,eAAA,CACAuB,QAAAA,SAAA/C,SAAA6C,SAAAG,KAAA,CAAA,CACA,CAFA,EAGA,MAAAD,QAAA,CACA,CAEA;;;;;;IAOA,QAAAE,UAAA,CAAAC,GAAA,CAAA,IAAAC,MAAA,2DAAA,CAAA,CACA,MAAAC,MAAAC,KAAA,CAAAD,KAAAE,MAAA,GAAAJ,GAAA,EAAAC,KAAA,CACA,CAEA;;;;;IAMA,QAAAI,aAAA,EAAA,IAAAxB,OAAA,2DAAA,EAAA,CACA,MAAA,IAAAyB,MAAA,CAAAzB,MAAA,CAAA,CAAA0B,IAAA,CAAA,CAAA,EAAAC,GAAA,CAAA,iBAAAnE,OAAA0D,UAAA1D,MAAAwC,MAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA4B,IAAA,CAAA,EAAA,CAAA,CACA,CAEA;;;;;;IAOA,QAAAC,kBAAA,CAAAC,OAAA,CAAAC,MAAA,CAAA,CACA,MAAA,UAAAC,GAAA,CAAAC,QAAA,CAAA,CACA,GAAAD,GAAA,CAAA,MAAAD,QAAAC,GAAA,CAAA,CACA,GAAA,CAAAC,SAAAhE,MAAA,EAAA,GAAA,GAAA,GAAA,CAAA,CACA,GAAA+D,GAAA,CAAA,MAAAD,QAAAC,GAAA,CAAA,CACA,GAAAtD,SAAA,CAAAuD,SAAAC,IAAA,EAAAD,SAAAE,aAAA,EAAA,EAAA,EAAA/B,IAAA,EAAA,CACA,GAAAnC,UAAAgE,SAAAhE,MAAA,EAAA,GAAA,CACA,MAAA8D,QAAA,GAAAtD,WAAA,CAAA,CAAAC,eAAA,CAAAT,eAAA,CAAA,CAAA,CAAA,CACA,CACA,MAAA6D,SAAAG,QAAA,CAAA,CACA,CATA,CAUA,CAEA;;;;;IAMA,QAAAG,YAAA,EAAA,IAAAC,SAAA,2DAAA9E,eAAA,CACA,GAAA,CAAAQ,QAAAuE,GAAA,CAAAD,QAAA,CAAA,CAAA,MAAAE,UAAA,CACA,GAAAC,IAAAzE,QAAA0E,GAAA,CAAAJ,QAAA,CAAA,CACA,MAAAG,IAAAE,UAAA,GAAAF,GAAAG,IAAA,CAAAH,EAAA,CAAAD,SAAA,CACA,CAEA;;;;IAKA,QAAAK,aAAA,EAAA,IAAAP,SAAA,2DAAA9E,eAAA,CACA,GAAAsF,YAAA/E,UAAA2E,GAAA,CAAAJ,QAAA,CAAA,CACA,GAAAG,IAAAJ,YAAAC,QAAA,CAAA,CACA,GAAAQ,YAAAL,EAAA,CAAA,CACAK,WAAApD,OAAA,CAAA,gCAAA+C,IAAAM,IAAA,CAAAC,iBAAA,CAAA,EAAA,EACAF,WAAAlD,KAAA,GACA7B,UAAAkF,MAAA,CAAAX,QAAA,EACA,CACA,CAEA;;;;;IAMA,QAAAS,KAAA,CAAAC,eAAA,CAAA,IAAAV,SAAA,2DAAA9E,eAAA,CACA,GAAAiF,IAAAJ,YAAAC,QAAA,CAAA,CACA,GAAAG,EAAA,CAAA,MAAAA,IAAAM,IAAA,CAAAC,iBAAA,CAAA,CACA,GAAA,CAAAjF,UAAAwE,GAAA,CAAAD,QAAA,CAAA,CAAAvE,UAAAwC,GAAA,CAAA+B,QAAA,CAAA,GAAA/E,IAAA,EAAA,EACAQ,UAAA2E,GAAA,CAAAJ,QAAA,EAAAY,GAAA,CAAAF,eAAA,EACA,CAEA;;;;;IAMA,QAAAG,aAAA,CAAAC,IAAA,CAAA,IAAAd,SAAA,2DAAA9E,eAAA,CACA,GAAA,CAAAK,UAAA0E,GAAA,CAAAD,QAAA,CAAA,CAAAzE,UAAA0C,GAAA,CAAA+B,QAAA,CAAA,GAAA1E,IAAA,EAAA,EACA,GAAA,CAAAC,UAAA6E,GAAA,CAAAJ,QAAA,EAAAC,GAAA,CAAAa,IAAA,CAAA,CAAAvF,UAAA6E,GAAA,CAAAJ,QAAA,EAAA/B,GAAA,CAAA6C,IAAA,CAAA,GAAA7F,IAAA,EAAA,EACA,MAAAM,WAAA6E,GAAA,CAAAJ,QAAA,EAAAI,GAAA,CAAAU,IAAA,CAAA,CACA,CAEA;;;;;IAMA,QAAAC,eAAA,CAAAxF,SAAA,CAAA8B,QAAA,CAAA,CACA9B,UAAA6B,OAAA,CAAA,0BAAA7B,WAAAoF,MAAA,CAAAtD,QAAA,CAAA,EAAA,EACA,CAEA;;;;;;IAOA,QAAA2D,cAAA,CAAAnD,GAAA,CAAAmC,QAAA,CAAA,CACA,GAAAnC,GAAA,CAAA,CACA,GAAA,CAAA9C,KAAA,CAAA,CACAC,WAAA4F,GAAA,CAAA,iBAAAvF,WAAA4C,GAAA,CAAA+B,QAAA,CAAAnC,GAAA,CAAA,EAAA,EACA,CAFA,IAEA,CACAxC,UAAA4C,GAAA,CAAA+B,QAAA,CAAAnC,GAAA,EACA,CACA,CACA,GAAA,CAAAA,GAAA,EAAA,CAAAxC,UAAA4E,GAAA,CAAAD,QAAA,CAAA,CAAA,KAAA,IAAAiB,SAAA,qCAAAjB,QAAA,EAAA,CACA,GAAA,CAAAnC,GAAA,EAAAxC,UAAA4E,GAAA,CAAAD,QAAA,CAAA,CAAAnC,IAAAxC,UAAA+E,GAAA,CAAAJ,QAAA,CAAA,CAEA,MAAAnC,IAAA,CACA,CAEA;;;;;IAMA,QAAAqD,UAAA,CAAArD,GAAA,CAAAmC,QAAA,CAAA,CACAtE,QAAAiF,MAAA,CAAAX,QAAA,EACAmB,WAAA,UAAA,CACA,GAAA3C,QAAA5C,OAAAwE,GAAA,CAAAJ,QAAA,CAAA,CAAAnE,YAAA,CAAA,CAAA,YAAA,CAAA,cAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CACAD,OAAAqC,GAAA,CAAA+B,QAAA,CAAAnE,aAAAI,YAAA,EACAmF,QAAAC,GAAA,CAAA,kBAAA,EACA3F,QAAAuC,GAAA,CAAA+B,QAAA,CAAA,GAAAsB,UAAA,CAAAzD,GAAA,CAAA,EACA0D,WAAA7F,QAAA0E,GAAA,CAAAJ,QAAA,CAAA,CAAAnC,GAAA,CAAAmC,QAAA,EACA,CACA,CAPA,CAOA,KAAA,CAPA,EAQA,CAEA,QAAAwB,MAAA,CAAAxB,QAAA,CAAA,CACAtE,QAAA0E,GAAA,CAAAJ,QAAA,EAAAyB,KAAA,GACA,CAEA;;;;;;IAOA,QAAAF,WAAA,CAAApB,EAAA,CAAAtC,GAAA,CAAAmC,QAAA,CAAA,CACA;;KAGA,QAAA0B,KAAA,EAAA,CACA9F,OAAAqC,GAAA,CAAA+B,QAAA,CAAAnE,aAAAM,SAAA,EACAiF,QAAAC,GAAA,kBAAAxD,GAAA,iBAAAmC,QAAA,GACAG,GAAAzD,gBAAA,CAAA,OAAA,CAAA+E,KAAA,EACAtB,GAAAzD,gBAAA,CAAA,SAAA,CAAAL,OAAA,EACAkE,aAAAP,QAAA,EACA,CAEA;;KAGA,QAAAyB,MAAA,EAAA,CACA7F,OAAAqC,GAAA,CAAA+B,QAAA,CAAAnE,aAAAK,MAAA,EACAkF,QAAAC,GAAA,kBAAAxD,GAAA,iBAAAmC,QAAA,GACAG,GAAA5C,mBAAA,CAAA,MAAA,CAAAmE,IAAA,EACAvB,GAAA5C,mBAAA,CAAA,OAAA,CAAAlB,OAAA,EACA8D,GAAA5C,mBAAA,CAAA,SAAA,CAAAlB,OAAA,EACA6E,UAAArD,GAAA,CAAAmC,QAAA,CAAAG,EAAA,EACA,CAEA;;;;KAKA,QAAAwB,MAAA,CAAAhC,GAAA,CAAA,CACAyB,QAAAO,KAAA,oBAAA9D,GAAA,iBAAAmC,QAAA,EAAAL,GAAA,EACA,MAAA8B,QAAA,CACA,CAEA;;;;KAKA,QAAApF,QAAA,CAAAuF,YAAA,CAAA,CACA,GAAAC,SAAA,QAAAA,QAAA,CAAAxF,OAAA,CAAA,CACA,GAAA,CAAAA,QAAAyF,EAAA,CAAA,CACA,GAAAvG,UAAA0E,GAAA,CAAA5D,QAAAyE,IAAA,CAAA,CAAA,CACAvF,UAAA6E,GAAA,CAAAU,IAAA,EAAA1D,OAAA,CAAA,0BAAAC,UAAAhB,QAAA0F,IAAA,CAAA,EAAA,EACA,CACA,CAJA,IAIA,CACA,GAAAvG,iBAAAyE,GAAA,CAAA5D,QAAAyF,EAAA,CAAA,CAAA,CACA,GAAAE,iBAAAxG,iBAAA4E,GAAA,CAAA/D,QAAAyF,EAAA,CAAA,CACA,GAAAzF,QAAAyE,IAAA,GAAA,OAAA,CAAA,CACAkB,gBAAA3F,QAAA0F,IAAA,CAAA,IAAA,EACA,CAFA,IAEA,CACAC,gBAAA,IAAA,CAAA3F,QAAA0F,IAAA,EACA,CACAvG,iBAAAmF,MAAA,CAAAtE,QAAAyF,EAAA,EACA,CACA,CACA,CAhBA,CAkBA,GAAA,MAAAF,cAAAG,IAAA,GAAA,QAAA,CAAA,CACAF,QAAAI,KAAAC,KAAA,CAAAN,aAAAG,IAAA,CAAA,EACA,CAFA,IAEA,IAAAH,aAAAG,IAAA,WAAAI,KAAA,CAAA,CACA,GAAAC,QAAA,GAAAC,WAAA,EAAA,CACAD,OAAAE,MAAA,CAAA,UAAA,CACAT,QAAA,GAAA/G,QAAAyH,MAAA,CAAA,GAAAC,WAAA,CAAA,KAAAC,MAAA,CAAA,CAAA,EACA,CAFA,CAGAL,OAAAM,iBAAA,CAAAd,aAAAG,IAAA,EACA,CACA,CAEA5B,GAAAzD,gBAAA,CAAA,OAAA,CAAAiF,KAAA,EACAxB,GAAAzD,gBAAA,CAAA,MAAA,CAAAgF,IAAA,EACA,CAEA;;;;;IAMA,QAAAiB,SAAA,CAAA9E,GAAA,CAAAmC,QAAA,CAAA,CACAnC,IAAAmD,cAAAnD,GAAA,CAAAmC,QAAA,CAAA,CACA,GAAAxB,QAAA5C,OAAAwE,GAAA,CAAAJ,QAAA,CAAA,CAAAnE,YAAA,CAAA,CAAA,YAAA,CAAA,cAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CACAD,OAAAqC,GAAA,CAAA+B,QAAA,CAAAnE,aAAAG,UAAA,EACA,GAAA,CAAAN,QAAAuE,GAAA,CAAAD,QAAA,CAAA,CAAAtE,QAAAuC,GAAA,CAAA+B,QAAA,CAAA,GAAAsB,UAAA,CAAAzD,GAAA,CAAA,EACA0D,WAAA7F,QAAA0E,GAAA,CAAAJ,QAAA,CAAA,CAAAnC,GAAA,CAAAmC,QAAA,EACA,CACA,CAEA;;;;;IAMA,QAAA4C,kBAAA,CAAAb,IAAA,CAAA,CACA,GAAA,CACA,MAAAE,MAAAY,SAAA,CAAAd,IAAA,CAAA,CACA,CAAA,MAAApC,GAAA,CAAA,CACA,KAAA,IAAAmD,UAAA,8CAAA,CACA,CACA,CAEA,GAAAC,yBAAA,CAEA;;;;IApXA,GAyXAlG,iBAzXA,yBA0XA,2BAAA,wCACA,GAAA,CAAAkG,wBAAA,CAAAA,yBAAA,IAAA,CACA,KAAAC,SAAA,CAAA,MAAA,CAAAJ,iBAAA,EACA,MAAAG,yBAAA,CACA,CAEA;;;;;KAhYA,qEAsYAlF,GAtYA,CAsYA,IAAAmC,SAAA,2DAAA9E,eAAA,CACA,GAAA,CAAA2C,GAAA,EAAA,CAAA9C,KAAA,CAAA,MAAAC,YAAA4F,GAAA,CAAA,iBAAA+B,UAAA9E,GAAA,CAAAmC,QAAA,CAAA,EAAA,CAAA,CACA2C,SAAA9E,GAAA,CAAAmC,QAAA,EACA,CAzYA,mCA2YA,IAAAA,SAAA,2DAAA9E,eAAA,CACAsG,MAAAxB,QAAA,EACA,CAEA;;;;;;;KA/YA,sCAuZA3C,QAvZA,CAuZAyD,IAvZA,CAuZA,IAAAd,SAAA,2DAAA9E,eAAA,CACA2F,aAAAC,IAAA,CAAAd,QAAA,EAAAY,GAAA,CAAAvD,QAAA,EACA,MAAA,kBAAAwD,cAAAC,IAAA,CAAAd,QAAA,EAAAW,MAAA,CAAAtD,QAAA,CAAA,EAAA,CACA,CAEA;;;;;KA5ZA,sDAkaAA,QAlaA,CAkaA2C,QAlaA,CAkaA,CACA,GAAAA,UAAAzE,UAAA0E,GAAA,CAAAD,QAAA,CAAA,CAAA,MAAAe,gBAAAxF,UAAA6E,GAAA,CAAAJ,QAAA,CAAA,CAAA3C,QAAA,CAAA,CACA9B,UAAA6B,OAAA,CAAA,0BAAA2D,gBAAAxF,SAAA,CAAA8B,QAAA,CAAA,EAAA,EACA,CAEA;;;;;;;KAvaA,wCA+aA0E,IA/aA,CA+aA,IAAA/B,SAAA,2DAAA9E,eAAA,IAAA4F,KAAA,2DAAA,MAAA,CACAiB,KAAAkB,MAAA,CAAAlB,KAAAkB,MAAA,EAAA,KAAA,CAEA,MAAA,IAAAC,QAAA,CAAA,SAAAzD,OAAA,CAAAC,MAAA,CAAA,CACA,GAAAoC,IAAA3C,cAAA,CACA3D,iBAAAyC,GAAA,CAAA6D,EAAA,CAAAtC,kBAAAC,OAAA,CAAAC,MAAA,CAAA,EACA,GAAArD,SAAA,CAAAyE,KAAA,SAAA,CAAAgB,KAAA,CAAAC,SAAA,CAAA,CACA,GAAArB,iBAAA,QAAAA,gBAAA,EAAA,CACA,GAAA/E,QAAAsE,GAAA,CAAAa,IAAA,CAAA,CAAA,CACA,GAAAqC,UAAAxH,QAAAyE,GAAA,CAAAU,IAAA,EAAAzE,OAAA,CAAA,CACA,MAAA8G,SAAA,CACA,CACA,KAAA,IAAAL,UAAA,8BAAAhC,IAAA,EAAA,CACA,CANA,CAOAL,KAAAC,eAAA,CAAAV,QAAA,EACA,CAZA,CAAA,CAaA,CA/bA,gDAicA+B,IAjcA,CAicA,IAAA/B,SAAA,2DAAA9E,eAAA,CACA,MAAA,MAAAkI,OAAA,CAAArB,IAAA,CAAA/B,QAAA,CAAA,MAAA,CAAA,CACA,CAEA;;;;;KArcA,qCA2cA,IAAAA,SAAA,2DAAA9E,eAAA,CACA,MAAA,CAAA,CAAA6E,YAAAC,QAAA,CAAA,CACA,CAEA;;;;;;KA/cA,gDAsdA8B,EAtdA,CAsdAjE,GAtdA,CAsdA,CACAxC,UAAA4C,GAAA,CAAA6D,EAAA,CAAAjE,GAAA,EACA,MAAA,KAAA,CACA,CAEA;;;;;KA3dA,sDAieAiE,EAjeA,CAieA,CACAzG,UAAAsF,MAAA,CAAAmB,EAAA,EACA,MAAA,KAAA,CACA,CAEA;;;;;;KAteA,4CA6eAhB,IA7eA,CA6eAuC,MA7eA,CA6eA,CACA1H,QAAAsC,GAAA,CAAA6C,IAAA,CAAAuC,MAAA,EACA,MAAA,KAAA,CACA,CAEA;;;;;KAlfA,kDAwfAvC,IAxfA,CAwfA,CACAnF,QAAAgF,MAAA,CAAAG,IAAA,EACA,MAAA,KAAA,CACA,CAEA;;;;KA7fA,2CAkgBA,CACA,MAAA5F,gBAAA,CACA,CAEA;;;;KAtgBA,OA2gBAoI,OAAAC,WA3gBA,mBA2gBA,CACA,MAAA,kBAAA,CACA,CA7gBA,gCAghBA/G,OACA,CAjhBA,EAihBAgH,MAjhBA,CAihBAA,OAAAC,MAjhBA","file":"websocket-express.js","sourcesContent":["(function(global, $){\n\t'use strict';\n\n\tlet buffer = global.buffer;\n\tlet ready = false;\n\n\tconst afterReady = new Set();\n\tconst defaultSocketId = 'main';\n\tconst chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\tconst endpoints = new Map();\n\tconst callbacks = new Map();\n\tconst acknowledgements = new Map();\n\tconst sendQueue = new Map();\n\tconst sockets = new Map();\n\tconst parsers = new Map();\n\tconst status = new Map();\n\tconst SOCKETSTATUS = Object.freeze({\n\t\tCONNECTING: 1,\n\t\tRECONNECTING: 2,\n\t\tCLOSED: 3,\n\t\tCONNECTED: 4\n\t});\n\n\tclass HTTP_ERROR extends Error {\n\t\tconstructor(message, ...params) {\n\t\t\tsuper(message.message,...params);\n\t\t\tthis.status = message.status;\n\t\t}\n\t}\n\n\t/**\n\t * Initiate this module, binding into all the correct global and framework points.\n\t */\n\tfunction init() {\n\t\tglobal.document.addEventListener(\"DOMContentLoaded\", onReady);\n\t\tif ($) $.websocket = new WebSocketService();\n\t\tif (global.angular) global.angular.module(\"websocket-express\", []).factory(\"$websocket\", ()=>new WebSocketService());\n\n\t\tif (!$ && !global.angular) {\n\t\t\tif (global.bolt) {\n\t\t\t\tglobal.bolt.WebSocketService = WebSocketService;\n\t\t\t} else {\n\t\t\t\tglobal.BoltWebSocketService = WebSocketService;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function to call when document is ready.  Only run once to perform all waiting websocket messages.\n\t */\n\tfunction onReady() {\n\t\tsetEndpoints();\n\t\tready = true;\n\t\tafterReady.forEach(callback=>callback());\n\t\tafterReady.clear();\n\t\tglobal.document.removeEventListener(\"DOMContentLoaded\", init);\n\t}\n\n\n\t/**\n\t * Search through all the locations for websocket endpoint definitions setting these.  Will use defaults if non\n\t * found. These can be defined in <link rel=\"websocket-endpoint\"> tags, where the title attribute is the endpoint\n\t * name and the href is the endpoint.\n\t */\n\tfunction setEndpoints() {\n\t\tsetDefaultEndPoint();\n\n\t\tlet endpointLinkElements = global.document.querySelectorAll(\"link[rel=websocket-endpoint][href]\");\n\t\tif (endpointLinkElements.length) {\n\t\t\tfor (let n=0; n < endpointLinkElements.length; n++) {\n\t\t\t\tlet url = (endpointLinkElements[n].getAttribute(\"href\") || \"\").trim();\n\t\t\t\tif (url !== \"\") {\n\t\t\t\t\tlet title = (endpointLinkElements[n].getAttribute(\"title\") || \"\").trim();\n\t\t\t\t\tif (title === \"\") title = defaultSocketId;\n\t\t\t\t\tendpoints.set(title, url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set the endpoint of the default endpoint, searching all the definition points for this.\n\t */\n\tfunction setDefaultEndPoint() {\n\t\tlet origin = global.location.origin;\n\t\tlet baseElement = global.document.querySelector(\"base[href]\");\n\t\tlet url;\n\t\tif (baseElement) {\n\t\t\tlet base = (baseElement.getAttribute(\"href\") || \"\").trim().replace(origin, \"\");\n\t\t\tif (base !== \"\") url = origin+base;\n\t\t} else {\n\t\t\turl = origin+'/';\n\t\t}\n\n\t\turl = url.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\");\n\n\t\tendpoints.set(defaultSocketId, url);\n\t}\n\n\t/**\n\t * Check if a status property is not one of a number of enum values.\n\t *\n\t * @param {*} status\t\t\tStatus to check.\n\t * @param {Object} enumeral\t\tEnum to check within.\n\t * @param {Arrray} checks\t\tEnum values to check.\n\t * @returns {boolean}\t\t\tDoes it pass the test.\n\t */\n\tfunction notEnum(status, enumeral, checks) {\n\t\tlet _status = true;\n\t\tchecks.forEach(check=>{\n\t\t\t_status = _status && (status !== enumeral[check])\n\t\t});\n\t\treturn _status;\n\t}\n\n\t/**\n\t * Generate a random integer between a start end end value.\n\t *\n\t * @param {integer} end\t\t\t\tThe start of the range.\n\t * @param {integer} [start=0]\t\tThe end of the range.\n\t * @returns {integer}\t\t\t\tRandom generated number.\n\t */\n\tfunction randomInt(end, start=0) {\n\t\treturn Math.floor(Math.random() * end) + start;\n\t}\n\n\t/**\n\t * Generate a randomstring.\n\t *\n\t * @param {integer} [length=32]\t\tThe length of string to generate.\n\t * @returns {string}\t\t\t\tRandom generated string.\n\t */\n\tfunction randomString(length=32) {\n\t\treturn (new Array(length)).fill(0).map(()=>chars[randomInt(chars.length - 1)]).join('');\n\t}\n\n\t/**\n\t * Create an acknowledge handler.\n\t *\n\t * @param {Function} resolve\t\tPromise resolve handler.\n\t * @param {Function} reject\t\t\tPromise rejection handler.\n\t * @returns {Function}\t\t\t\tThe handler.\n\t */\n\tfunction createAcknowledge(resolve, reject) {\n\t\treturn (err, response)=>{\n\t\t\tif (err) return reject(err);\n\t\t\tif ((response.status || 200) >= 400) {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tconst message = (response.body || response.statusMessage || \"\").trim();\n\t\t\t\tconst status = (response.status || 400);\n\t\t\t\treturn reject(new HTTP_ERROR({message, status}));\n\t\t\t}\n\t\t\treturn resolve(response);\n\t\t};\n\t}\n\n\t/**\n\t * Is given websocket ready for transporting data?\n\t *\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket id to test.\n\t * @returns {boolean}\t\t\t\t\t\t\t\tIs it ready?\n\t */\n\tfunction socketReady(socketId=defaultSocketId) {\n\t\tif (!sockets.has(socketId)) return undefined;\n\t\tconst ws = sockets.get(socketId);\n\t\treturn ((ws.readyState === ws.OPEN) ? ws : undefined);\n\t}\n\n\t/**\n\t * Send all the messages for a given socket that are in the queue.\n\t *\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket id to send messages for.\n\t */\n\tfunction runSendQueue(socketId=defaultSocketId) {\n\t\tconst _sendQueue = sendQueue.get(socketId);\n\t\tconst ws = socketReady(socketId);\n\t\tif (_sendQueue && ws) {\n\t\t\t_sendQueue.forEach(messageFunction=>ws.send(messageFunction()));\n\t\t\t_sendQueue.clear();\n\t\t\tsendQueue.delete(socketId);\n\t\t}\n\t}\n\n\t/**\n\t * Send a given message on a given socket.\n\t *\n\t * @param {Function} messageFunction\t\t\t\tMessage function to call to generate the message.\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket to send on.\n\t */\n\tfunction send(messageFunction, socketId=defaultSocketId) {\n\t\tconst ws = socketReady(socketId);\n\t\tif (ws) return ws.send(messageFunction());\n\t\tif (!sendQueue.has(socketId)) sendQueue.set(socketId, new Set());\n\t\tsendQueue.get(socketId).add(messageFunction);\n\t}\n\n\t/**\n\t * Get callbacksfor given listen type on given socket.\n\t * @param {string} type\t\t\t\t\t\t\t\tThe type to get for.\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket to get callbacks for.\n\t * @returns {Array.<Function>}\t\t\t\t\t\tArray of callbacks.\n\t */\n\tfunction getCallbacks(type, socketId=defaultSocketId) {\n\t\tif (!callbacks.has(socketId)) callbacks.set(socketId, new Map());\n\t\tif (!callbacks.get(socketId).has(type)) callbacks.get(socketId).set(type, new Set());\n\t\treturn callbacks.get(socketId).get(type);\n\t}\n\n\t/**\n\t * Remove the given callback from a callback set.\n\t *\n\t * @param {Set.<Set>} callbacks\t\tCallback to search through.\n\t * @param {Function} callback\t\tCallback to remove.\n\t */\n\tfunction removeCallback(callbacks, callback) {\n\t\tcallbacks.forEach(callbacks=>callbacks.delete(callback));\n\t}\n\n\t/**\n\t * Get the endpoint url for the given socket id.\n\t *\n\t * @param {string} [url]\t\t\tThe url to set endpoint to.\n\t * @param {string} socketId\t\t\tThe socket id to set endpoint on.\n\t * @returns {string}\t\t\t\tThe endpoint url for given socket id.\n\t */\n\tfunction setEnpointUrl(url, socketId) {\n\t\tif (url) {\n\t\t\tif (!ready) {\n\t\t\t\tafterReady.add(()=>endpoints.set(socketId, url));\n\t\t\t} else {\n\t\t\t\tendpoints.set(socketId, url);\n\t\t\t}\n\t\t}\n\t\tif (!url && !endpoints.has(socketId)) throw new URIError(`No websocket endpoint for ${socketId}`);\n\t\tif (!url && endpoints.has(socketId)) url = endpoints.get(socketId);\n\n\t\treturn url;\n\t}\n\n\t/**\n\t * Try reconnecting to given socket after it has dropped.\n\t *\n\t * @param {string} url\t\t\tThe endpoint url for websocket.\n\t * @param {string} socketId\t\tThe socket id.\n\t */\n\tfunction reconnect(url, socketId) {\n\t\tsockets.delete(socketId);\n\t\tsetTimeout(()=>{\n\t\t\tif (notEnum(status.get(socketId), SOCKETSTATUS, ['CONNECTING', 'RECONNECTING', 'CONNECTED'])) {\n\t\t\t\tstatus.set(socketId, SOCKETSTATUS.RECONNECTING);\n\t\t\t\tconsole.log(\"Trying reconnect\");\n\t\t\t\tsockets.set(socketId, new WebSocket(url));\n\t\t\t\tconnecting(sockets.get(socketId), url, socketId);\n\t\t\t}\n\t\t}, 1000*3);\n\t}\n\n\tfunction drop(socketId) {\n\t\tsockets.get(socketId).close();\n\t}\n\n\t/**\n\t * Handle websocket connection, errors and reconnection.\n\t *\n\t * @param {WebSocket} ws\t\t\tThe websocket to handle.\n\t * @param {string} url\t\t\t\tThe endpoint to connect to.\n\t * @param {string} socketId\t\t\tThe socket id to set.\n\t */\n\tfunction connecting(ws, url, socketId) {\n\t\t/**\n\t\t * After open listener, setup message handling and send the message queue.\n\t\t */\n\t\tfunction open() {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CONNECTED);\n\t\t\tconsole.log(`Opened ${url} for ${socketId}`);\n\t\t\tws.addEventListener(\"close\", close);\n\t\t\tws.addEventListener(\"message\", message);\n\t\t\trunSendQueue(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Close listener, try to reconnect.\n\t\t */\n\t\tfunction close() {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CLOSED);\n\t\t\tconsole.log(`Closed ${url} for ${socketId}`);\n\t\t\tws.removeEventListener(\"open\", open);\n\t\t\tws.removeEventListener(\"close\", message);\n\t\t\tws.removeEventListener(\"message\", message);\n\t\t\treconnect(url, socketId, ws);\n\t\t}\n\n\t\t/**\n\t\t * Handle any websocket errors.\n\t\t *\n\t\t * @param {Error} err\t\tError message to handle.\n\t\t */\n\t\tfunction error(err) {\n\t\t\tconsole.error(`Error on ${url} for ${socketId}`, err);\n\t\t\treturn close();\n\t\t}\n\n\t\t/**\n\t\t * Handle a message event\n\t\t *\n\t\t * @param {Event} messageEvent\t\tThe message event to handle.\n\t\t */\n\t\tfunction message(messageEvent) {\n\t\t\tconst respond = (message)=>{\n\t\t\t\tif (!message.id) {\n\t\t\t\t\tif (callbacks.has(message.type)) {\n\t\t\t\t\t\tcallbacks.get(type).forEach(callbacks=>callback(message.data));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (acknowledgements.has(message.id)) {\n\t\t\t\t\t\tlet acknowledgement = acknowledgements.get(message.id);\n\t\t\t\t\t\tif (message.type === 'error') {\n\t\t\t\t\t\t\tacknowledgement(message.data, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tacknowledgement(null, message.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tacknowledgements.delete(message.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof messageEvent.data === 'string') {\n\t\t\t\trespond(JSON.parse(messageEvent.data));\n\t\t\t} else if (messageEvent.data instanceof Blob) {\n\t\t\t\tlet reader = new FileReader();\n\t\t\t\treader.onload = function() {\n\t\t\t\t\trespond(new buffer.Buffer(new Uint8Array(this.result)));\n\t\t\t\t};\n\t\t\t\treader.readAsArrayBuffer(messageEvent.data);\n\t\t\t}\n\t\t}\n\n\t\tws.addEventListener(\"error\", error);\n\t\tws.addEventListener(\"open\", open);\n\t}\n\n\t/**\n\t * Connect to a given endpoint for socket id supplied.\n\t *\n\t * @param {string} [url]\tThe endpoint to connect to.\n\t * @param socketId\t\t\tThe socket id to connecct for.\n\t */\n\tfunction connect(url, socketId) {\n\t\turl = setEnpointUrl(url, socketId);\n\t\tif (notEnum(status.get(socketId), SOCKETSTATUS, ['CONNECTING', 'RECONNECTING', 'CONNECTED'])) {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CONNECTING);\n\t\t\tif (!sockets.has(socketId)) sockets.set(socketId, new WebSocket(url));\n\t\t\tconnecting(sockets.get(socketId), url, socketId);\n\t\t}\n\t}\n\n\t/**\n\t * Json parser (default one applied by default to all new socket channels).\n\t *\n\t * @param {*} data\t\tData to parse into JSON.\n\t * @returns {string}\tJSON from the data.\n\t */\n\tfunction defaultJsonParser(data) {\n\t\ttry {\n\t\t\treturn JSON.stringify(data);\n\t\t} catch(err) {\n\t\t\tthrow new TypeError(`Could not convert data to json for sending`);\n\t\t}\n\t}\n\n\tlet WebSocketServiceInstance;\n\n\t/**\n\t * Websocket handler service\n\t *\n\t * @singleton\n\t */\n\tclass WebSocketService {\n\t\tconstructor() {\n\t\t\tif (!WebSocketServiceInstance) WebSocketServiceInstance = this;\n\t\t\tthis.addParser(\"json\", defaultJsonParser);\n\t\t\treturn WebSocketServiceInstance;\n\t\t}\n\n\t\t/**\n\t\t * Connect to a given endpoint for given socket-id.\n\t\t *\n\t\t * @param {string} url\t\t\t\t\t\t\t\tEndpoint to connect to.\n\t\t * @param {string} [socketId=defaultSocketId]\t\tSocket id to connect for.\n\t\t */\n\t\tconnect(url, socketId=defaultSocketId) {\n\t\t\tif (!url && !ready) return afterReady.add(()=>connect(url, socketId));\n\t\t\tconnect(url, socketId);\n\t\t}\n\n\t\tdrop(socketId=defaultSocketId) {\n\t\t\tdrop(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Add a listener for given message type on given socket.\n\t\t *\n\t\t * @param {Function} callback\t\tListener callback.\n\t\t * @param {string} type\t\t\t\tMessage type to listen for.\n\t\t * @param {string} socketId\t\t\tSocket id to use.\n\t\t * @returns {Function}\t\t\t\tUnlisten function.\n\t\t */\n\t\tlisten(callback, type, socketId=defaultSocketId) {\n\t\t\tgetCallbacks(type, socketId).add(callback);\n\t\t\treturn ()=>getCallbacks(type, socketId).delete(callback);\n\t\t}\n\n\t\t/**\n\t\t * Remove a given listener on the given socket.\n\t\t *\n\t\t * @param {Function} callback\t\tListener to remove.\n\t\t * @param {string} socketId\t\t\tSocket id to remove listener on.\n\t\t */\n\t\tremoveListener(callback, socketId) {\n\t\t\tif (socketId && callbacks.has(socketId)) return removeCallback(callbacks.get(socketId), callback);\n\t\t\tcallbacks.forEach(callbacks=>removeCallback(callbacks, callback));\n\t\t}\n\n\t\t/**\n\t\t * Send a request on the given socket.\n\t\t *\n\t\t * @param {Object} data\t\t\t\t\t\t\tData to send.\n\t\t * @param {string} [socketId=defaultSocketId]\tSocket to send on.\n\t\t * @param {string} [type=json]\t\t\t\t\tType of data to send.\n\t\t * @returns {Promise.<Object>}\t\t\t\t\tPromise resolving to server response.\n\t\t */\n\t\trequest(data, socketId=defaultSocketId, type='json') {\n\t\t\tdata.method = data.method || \"get\";\n\n\t\t\treturn new Promise((resolve, reject)=>{\n\t\t\t\tlet id = randomString();\n\t\t\t\tacknowledgements.set(id, createAcknowledge(resolve, reject));\n\t\t\t\tlet message = {type:\"request\", id, data};\n\t\t\t\tlet messageFunction = ()=>{\n\t\t\t\t\tif (parsers.has(type)) {\n\t\t\t\t\t\tconst _message = parsers.get(type)(message);\n\t\t\t\t\t\treturn _message;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new TypeError(`No parser for type ${type}`);\n\t\t\t\t};\n\t\t\t\tsend(messageFunction, socketId);\n\t\t\t});\n\t\t}\n\n\t\trequestJson(data, socketId=defaultSocketId) {\n\t\t\treturn this.request(data, socketId, 'json');\n\t\t}\n\n\t\t/**\n\t\t * Is given socket open and ready?\n\t\t *\n\t\t * @param {string} [socketId=defaultSocketId]\t\tSocket to test for readiness.\n\t\t * @returns {boolean}\t\t\t\t\t\t\t\tIs it ready?\n\t\t */\n\t\tready(socketId=defaultSocketId) {\n\t\t\treturn !!socketReady(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Add an endpoint url for a given id.\n\t\t *\n\t\t * @param {string} id\t\t\t\tThe id set endpoint on.\n\t\t * @param {string} url\t\t\t\tThe endpoint url.\n\t\t * @param {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\taddEndpoint(id, url) {\n\t\t\tendpoints.set(id, url);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * remove an endpoint for a given id.\n\t\t *\n\t\t * @param {string} id\t\t\t\tThe id to remove an endpoint for.\n\t\t * @param {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\tremoveEndpoint(id) {\n\t\t\tendpoints.delete(id);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Add a message parser for given type.\n\t\t *\n\t\t * @param {string} type\t\t\t\tMessage type to add for.\n\t\t * @param {Function} parser\t\t\tParser function to add.\n\t\t * @returns {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\taddParser(type, parser) {\n\t\t\tparsers.set(type, parser);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Remove a parser for a given message type.\n\t\t *\n\t\t * @param {string} type\t\t\t\tMessage type to remove for.\n\t\t * @returns {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\tremoveParser(type) {\n\t\t\tparsers.delete(type);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Get the default socket id.\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tget defaultSocketId() {\n\t\t\treturn defaultSocketId;\n\t\t}\n\n\t\t/**\n\t\t * Get the object type string.\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tget [Symbol.toStringTag]() {\n\t\t\treturn \"WebSocketService\";\n\t\t}\n\t}\n\n\tinit();\n})(window, window.jQuery);\n"]}