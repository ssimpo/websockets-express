{"version":3,"sources":["websockets-express.js"],"names":["global","buffer","ready","afterReady","Set","defaultSocketId","chars","split","endpoints","Map","callbacks","acknowledgements","sendQueue","sockets","parsers","status","SOCKETSTATUS","Object","freeze","CONNECTING","RECONNECTING","CLOSED","CONNECTED","HTTP_ERROR","message","params","Error","init","jQuery","$","undefined","angular","bolt","doc","document","websocket","WebSocketService","module","factory","MODE","has","DEBUG","BoltWebSocketService","completed","removeEventListener","window","onReady","readyState","documentElement","doScroll","setTimeout","addEventListener","setEndpoints","forEach","callback","clear","notEnum","enumeral","checks","_status","check","randomInt","end","start","Math","floor","random","randomString","length","Array","fill","map","join","setDefaultEndPoint","endpointLinkElements","querySelectorAll","n","url","getAttribute","trim","title","set","location","origin","querySelector","baseElement","base","replace","createAcknowledge","resolve","reject","err","response","body","statusMessage","socketReady","socketId","ws","get","OPEN","runSendQueue","_sendQueue","send","messageFunction","delete","add","getCallbacks","type","removeCallback","setEnpointUrl","URIError","reconnect","console","log","WebSocket","connecting","drop","close","open","error","messageEvent","respond","id","data","acknowledgement","JSON","parse","Blob","reader","FileReader","onload","Buffer","Uint8Array","result","readAsArrayBuffer","connect","defaultJsonParser","stringify","TypeError","WebSocketServiceInstance","addParser","method","Promise","_message","request","parser","Symbol","toStringTag"],"mappings":"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","file":"websocket-express.js","sourcesContent":["(function(global){\n\t'use strict';\n\n\tlet buffer = global.buffer;\n\tlet ready = false;\n\n\tconst afterReady = new Set();\n\tconst defaultSocketId = 'main';\n\tconst chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\tconst endpoints = new Map();\n\tconst callbacks = new Map();\n\tconst acknowledgements = new Map();\n\tconst sendQueue = new Map();\n\tconst sockets = new Map();\n\tconst parsers = new Map();\n\tconst status = new Map();\n\tconst SOCKETSTATUS = Object.freeze({\n\t\tCONNECTING: 1,\n\t\tRECONNECTING: 2,\n\t\tCLOSED: 3,\n\t\tCONNECTED: 4\n\t});\n\n\tclass HTTP_ERROR extends Error {\n\t\tconstructor(message, ...params) {\n\t\t\tsuper(message.message,...params);\n\t\t\tthis.status = message.status;\n\t\t}\n\t}\n\n\t/**\n\t * Initiate this module, binding into all the correct global and framework points.\n\t */\n\tfunction init() {\n\t\tconst {\n\t\t\tjQuery=((!!global.$ && !!global.$.jQuery)?global.$:undefined),\n\t\t\tangular,\n\t\t\tbolt,\n\t\t\tdocument:doc\n\t\t} = global;\n\n\t\tif (!!jQuery) global.jQuery.websocket = new WebSocketService();\n\t\tif (!!angular) angular.module(\"websocket-express\", []).factory(\"$websocket\", ()=>new WebSocketService());\n\t\tif (!!bolt) {\n\t\t\tbolt.WebSocketService = WebSocketService;\n\t\t\tif (!!bolt.MODE && (bolt.MODE.has(\"DEVELOPMENT\") || bolt.MODE.has(\"DEBUG\"))) {\n\t\t\t\tbolt.WebSocketService.DEBUG = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!!bolt && !!jQuery && !!angular) global.BoltWebSocketService = WebSocketService;\n\n\t\t// This is extracted from jQuery.ready(), we want the works in all situations provided by jQuery without\n\t\t// the jQuery dependency. (@see https://github.com/jquery/jquery/blob/master/src/core/ready.js).\n\t\tfunction completed() {\n\t\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed);\n\t\t\twindow.removeEventListener(\"load\", completed);\n\t\t\tonReady();\n\t\t}\n\n\t\tif (doc.readyState===\"complete\" || (doc.readyState !==\"loading\" && !doc.documentElement.doScroll)) {\n\t\t\twindow.setTimeout(onReady);\n\t\t} else {\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\t\t\twindow.addEventListener( \"load\", completed );\n\t\t}\n\t}\n\n\t/**\n\t * Function to call when document is ready.  Only run once to perform all waiting websocket messages.\n\t */\n\tfunction onReady() {\n\t\tsetEndpoints();\n\t\tready = true;\n\t\tafterReady.forEach(callback=>callback());\n\t\tafterReady.clear();\n\t}\n\n\t/**\n\t * Check if a status property is not one of a number of enum values.\n\t *\n\t * @param {*} status\t\t\tStatus to check.\n\t * @param {Object} enumeral\t\tEnum to check within.\n\t * @param {Arrray} checks\t\tEnum values to check.\n\t * @returns {boolean}\t\t\tDoes it pass the test.\n\t */\n\tfunction notEnum(status, enumeral, checks) {\n\t\tlet _status = true;\n\t\tchecks.forEach(check=>{\n\t\t\t_status = _status && (status !== enumeral[check])\n\t\t});\n\t\treturn _status;\n\t}\n\n\t/**\n\t * Generate a random integer between a start end end value.\n\t *\n\t * @param {integer} end\t\t\t\tThe start of the range.\n\t * @param {integer} [start=0]\t\tThe end of the range.\n\t * @returns {integer}\t\t\t\tRandom generated number.\n\t */\n\tfunction randomInt(end, start=0) {\n\t\treturn Math.floor(Math.random() * end) + start;\n\t}\n\n\t/**\n\t * Generate a randomstring.\n\t *\n\t * @param {integer} [length=32]\t\tThe length of string to generate.\n\t * @returns {string}\t\t\t\tRandom generated string.\n\t */\n\tfunction randomString(length=32) {\n\t\treturn (new Array(length)).fill(0).map(()=>chars[randomInt(chars.length - 1)]).join('');\n\t}\n\n\t/**\n\t * Search through all the locations for websocket endpoint definitions setting these.  Will use defaults if non\n\t * found. These can be defined in <link rel=\"websocket-endpoint\"> tags, where the title attribute is the endpoint\n\t * name and the href is the endpoint.\n\t */\n\tfunction setEndpoints() {\n\t\tsetDefaultEndPoint();\n\n\t\tlet endpointLinkElements = global.document.querySelectorAll(\"link[rel=websocket-endpoint][href]\");\n\t\tif (endpointLinkElements.length) {\n\t\t\tfor (let n=0; n < endpointLinkElements.length; n++) {\n\t\t\t\tlet url = (endpointLinkElements[n].getAttribute(\"href\") || \"\").trim();\n\t\t\t\tif (url !== \"\") {\n\t\t\t\t\tlet title = (endpointLinkElements[n].getAttribute(\"title\") || \"\").trim();\n\t\t\t\t\tif (title === \"\") title = defaultSocketId;\n\t\t\t\t\tendpoints.set(title, url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set the endpoint of the default endpoint, searching all the definition points for this.\n\t */\n\tfunction setDefaultEndPoint() {\n\t\tconst [origin, baseElement] = [global.location.origin, global.document.querySelector(\"base[href]\")];\n\t\tlet url;\n\t\tif (baseElement) {\n\t\t\tconst base = (baseElement.getAttribute(\"href\") || \"\").trim().replace(origin, \"\");\n\t\t\tif (base !== \"\") url = `${origin}${base}`;\n\t\t} else {\n\t\t\turl = `${origin}/`;\n\t\t}\n\n\t\turl = url\n\t\t\t.replace(\"https://\", \"wss://\")\n\t\t\t.replace(\"http://\", \"ws://\");\n\n\t\tendpoints.set(defaultSocketId, url);\n\t}\n\n\t/**\n\t * Create an acknowledge handler.\n\t *\n\t * @param {Function} resolve\t\tPromise resolve handler.\n\t * @param {Function} reject\t\t\tPromise rejection handler.\n\t * @returns {Function}\t\t\t\tThe handler.\n\t */\n\tfunction createAcknowledge(resolve, reject) {\n\t\treturn (err, response)=>{\n\t\t\tif (err) return reject(err);\n\t\t\tif ((response.status || 200) >= 400) {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tconst message = (response.body || response.statusMessage || \"\").trim();\n\t\t\t\tconst status = (response.status || 400);\n\t\t\t\treturn reject(new HTTP_ERROR({message, status}));\n\t\t\t}\n\t\t\treturn resolve(response);\n\t\t};\n\t}\n\n\t/**\n\t * Is given websocket ready for transporting data?\n\t *\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket id to test.\n\t * @returns {boolean}\t\t\t\t\t\t\t\tIs it ready?\n\t */\n\tfunction socketReady(socketId=defaultSocketId) {\n\t\tif (!sockets.has(socketId)) return undefined;\n\t\tconst ws = sockets.get(socketId);\n\t\treturn ((ws.readyState === ws.OPEN) ? ws : undefined);\n\t}\n\n\t/**\n\t * Send all the messages for a given socket that are in the queue.\n\t *\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket id to send messages for.\n\t */\n\tfunction runSendQueue(socketId=defaultSocketId) {\n\t\tconst _sendQueue = sendQueue.get(socketId);\n\t\tconst ws = socketReady(socketId);\n\t\tif (_sendQueue && ws) {\n\t\t\t_sendQueue.forEach(messageFunction=>ws.send(messageFunction()));\n\t\t\t_sendQueue.clear();\n\t\t\tsendQueue.delete(socketId);\n\t\t}\n\t}\n\n\t/**\n\t * Send a given message on a given socket.\n\t *\n\t * @param {Function} messageFunction\t\t\t\tMessage function to call to generate the message.\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket to send on.\n\t */\n\tfunction send(messageFunction, socketId=defaultSocketId) {\n\t\tconst ws = socketReady(socketId);\n\t\tif (ws) return ws.send(messageFunction());\n\t\tif (!sendQueue.has(socketId)) sendQueue.set(socketId, new Set());\n\t\tsendQueue.get(socketId).add(messageFunction);\n\t}\n\n\t/**\n\t * Get callbacksfor given listen type on given socket.\n\t * @param {string} type\t\t\t\t\t\t\t\tThe type to get for.\n\t * @param {string} [socketId=defaultSocketId]\t\tThe socket to get callbacks for.\n\t * @returns {Array.<Function>}\t\t\t\t\t\tArray of callbacks.\n\t */\n\tfunction getCallbacks(type, socketId=defaultSocketId) {\n\t\tif (!callbacks.has(socketId)) callbacks.set(socketId, new Map());\n\t\tif (!callbacks.get(socketId).has(type)) callbacks.get(socketId).set(type, new Set());\n\t\treturn callbacks.get(socketId).get(type);\n\t}\n\n\t/**\n\t * Remove the given callback from a callback set.\n\t *\n\t * @param {Set.<Set>} callbacks\t\tCallback to search through.\n\t * @param {Function} callback\t\tCallback to remove.\n\t */\n\tfunction removeCallback(callbacks, callback) {\n\t\tcallbacks.forEach(callbacks=>callbacks.delete(callback));\n\t}\n\n\t/**\n\t * Get the endpoint url for the given socket id.\n\t *\n\t * @param {string} [url]\t\t\tThe url to set endpoint to.\n\t * @param {string} socketId\t\t\tThe socket id to set endpoint on.\n\t * @returns {string}\t\t\t\tThe endpoint url for given socket id.\n\t */\n\tfunction setEnpointUrl(url, socketId) {\n\t\tif (url) {\n\t\t\tif (!ready) {\n\t\t\t\tafterReady.add(()=>endpoints.set(socketId, url));\n\t\t\t} else {\n\t\t\t\tendpoints.set(socketId, url);\n\t\t\t}\n\t\t}\n\t\tif (!url && !endpoints.has(socketId)) throw new URIError(`No websocket endpoint for ${socketId}`);\n\t\tif (!url && endpoints.has(socketId)) url = endpoints.get(socketId);\n\n\t\treturn url;\n\t}\n\n\t/**\n\t * Try reconnecting to given socket after it has dropped.\n\t *\n\t * @param {string} url\t\t\tThe endpoint url for websocket.\n\t * @param {string} socketId\t\tThe socket id.\n\t */\n\tfunction reconnect(url, socketId) {\n\t\tsockets.delete(socketId);\n\t\tsetTimeout(()=>{\n\t\t\tif (notEnum(status.get(socketId), SOCKETSTATUS, ['CONNECTING', 'RECONNECTING', 'CONNECTED'])) {\n\t\t\t\tstatus.set(socketId, SOCKETSTATUS.RECONNECTING);\n\t\t\t\tif (!!WebSocketService.DEBUG) console.log(\"Trying reconnect\");\n\t\t\t\tsockets.set(socketId, new WebSocket(url));\n\t\t\t\tconnecting(sockets.get(socketId), url, socketId);\n\t\t\t}\n\t\t}, 1000*3);\n\t}\n\n\tfunction drop(socketId) {\n\t\tsockets.get(socketId).close();\n\t}\n\n\t/**\n\t * Handle websocket connection, errors and reconnection.\n\t *\n\t * @param {WebSocket} ws\t\t\tThe websocket to handle.\n\t * @param {string} url\t\t\t\tThe endpoint to connect to.\n\t * @param {string} socketId\t\t\tThe socket id to set.\n\t */\n\tfunction connecting(ws, url, socketId) {\n\t\t/**\n\t\t * After open listener, setup message handling and send the message queue.\n\t\t */\n\t\tfunction open() {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CONNECTED);\n\t\t\tif (!!WebSocketService.DEBUG) console.log(`Opened ${url} for ${socketId}`);\n\t\t\tws.addEventListener(\"close\", close);\n\t\t\tws.addEventListener(\"message\", message);\n\t\t\trunSendQueue(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Close listener, try to reconnect.\n\t\t */\n\t\tfunction close() {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CLOSED);\n\t\t\tif (!!WebSocketService.DEBUG) console.log(`Closed ${url} for ${socketId}`);\n\t\t\tws.removeEventListener(\"open\", open);\n\t\t\tws.removeEventListener(\"close\", message);\n\t\t\tws.removeEventListener(\"message\", message);\n\t\t\treconnect(url, socketId, ws);\n\t\t}\n\n\t\t/**\n\t\t * Handle any websocket errors.\n\t\t *\n\t\t * @param {Error} err\t\tError message to handle.\n\t\t */\n\t\tfunction error(err) {\n\t\t\tconsole.error(`Error on ${url} for ${socketId}`, err);\n\t\t\treturn close();\n\t\t}\n\n\t\t/**\n\t\t * Handle a message event\n\t\t *\n\t\t * @param {Event} messageEvent\t\tThe message event to handle.\n\t\t */\n\t\tfunction message(messageEvent) {\n\t\t\tconst respond = (message)=>{\n\t\t\t\tif (!message.id) {\n\t\t\t\t\tif (callbacks.has(message.type)) {\n\t\t\t\t\t\tcallbacks.get(type).forEach(callbacks=>callback(message.data));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (acknowledgements.has(message.id)) {\n\t\t\t\t\t\tlet acknowledgement = acknowledgements.get(message.id);\n\t\t\t\t\t\tif (message.type === 'error') {\n\t\t\t\t\t\t\tacknowledgement(message.data, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tacknowledgement(null, message.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tacknowledgements.delete(message.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof messageEvent.data === 'string') {\n\t\t\t\trespond(JSON.parse(messageEvent.data));\n\t\t\t} else if (messageEvent.data instanceof Blob) {\n\t\t\t\tlet reader = new FileReader();\n\t\t\t\treader.onload = function() {\n\t\t\t\t\trespond(new buffer.Buffer(new Uint8Array(this.result)));\n\t\t\t\t};\n\t\t\t\treader.readAsArrayBuffer(messageEvent.data);\n\t\t\t}\n\t\t}\n\n\t\tws.addEventListener(\"error\", error);\n\t\tws.addEventListener(\"open\", open);\n\t}\n\n\t/**\n\t * Connect to a given endpoint for socket id supplied.\n\t *\n\t * @param {string} [url]\tThe endpoint to connect to.\n\t * @param socketId\t\t\tThe socket id to connecct for.\n\t */\n\tfunction connect(url, socketId) {\n\t\turl = setEnpointUrl(url, socketId);\n\t\tif (notEnum(status.get(socketId), SOCKETSTATUS, ['CONNECTING', 'RECONNECTING', 'CONNECTED'])) {\n\t\t\tstatus.set(socketId, SOCKETSTATUS.CONNECTING);\n\t\t\tif (!sockets.has(socketId)) sockets.set(socketId, new WebSocket(url));\n\t\t\tconnecting(sockets.get(socketId), url, socketId);\n\t\t}\n\t}\n\n\t/**\n\t * Json parser (default one applied by default to all new socket channels).\n\t *\n\t * @param {*} data\t\tData to parse into JSON.\n\t * @returns {string}\tJSON from the data.\n\t */\n\tfunction defaultJsonParser(data) {\n\t\ttry {\n\t\t\treturn JSON.stringify(data);\n\t\t} catch(err) {\n\t\t\tthrow new TypeError(`Could not convert data to json for sending`);\n\t\t}\n\t}\n\n\tlet WebSocketServiceInstance;\n\n\t/**\n\t * Websocket handler service\n\t *\n\t * @singleton\n\t */\n\tclass WebSocketService {\n\t\tconstructor() {\n\t\t\t// Singleton pattern\n\t\t\tif (!WebSocketServiceInstance) WebSocketServiceInstance = this;\n\t\t\tthis.addParser(\"json\", defaultJsonParser);\n\t\t\treturn WebSocketServiceInstance;\n\t\t}\n\n\t\t/**\n\t\t * Connect to a given endpoint for given socket-id.\n\t\t *\n\t\t * @param {string} url\t\t\t\t\t\t\t\tEndpoint to connect to.\n\t\t * @param {string} [socketId=defaultSocketId]\t\tSocket id to connect for.\n\t\t */\n\t\tconnect(url, socketId=defaultSocketId) {\n\t\t\tif (!url && !ready) return afterReady.add(()=>connect(url, socketId));\n\t\t\tconnect(url, socketId);\n\t\t}\n\n\t\tdrop(socketId=defaultSocketId) {\n\t\t\tdrop(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Add a listener for given message type on given socket.\n\t\t *\n\t\t * @param {Function} callback\t\tListener callback.\n\t\t * @param {string} type\t\t\t\tMessage type to listen for.\n\t\t * @param {string} socketId\t\t\tSocket id to use.\n\t\t * @returns {Function}\t\t\t\tUnlisten function.\n\t\t */\n\t\tlisten(callback, type, socketId=defaultSocketId) {\n\t\t\tgetCallbacks(type, socketId).add(callback);\n\t\t\treturn ()=>getCallbacks(type, socketId).delete(callback);\n\t\t}\n\n\t\t/**\n\t\t * Remove a given listener on the given socket.\n\t\t *\n\t\t * @param {Function} callback\t\tListener to remove.\n\t\t * @param {string} socketId\t\t\tSocket id to remove listener on.\n\t\t */\n\t\tremoveListener(callback, socketId) {\n\t\t\tif (socketId && callbacks.has(socketId)) return removeCallback(callbacks.get(socketId), callback);\n\t\t\tcallbacks.forEach(callbacks=>removeCallback(callbacks, callback));\n\t\t}\n\n\t\t/**\n\t\t * Send a request on the given socket.\n\t\t *\n\t\t * @param {Object} data\t\t\t\t\t\t\tData to send.\n\t\t * @param {string} [socketId=defaultSocketId]\tSocket to send on.\n\t\t * @param {string} [type=json]\t\t\t\t\tType of data to send.\n\t\t * @returns {Promise.<Object>}\t\t\t\t\tPromise resolving to server response.\n\t\t */\n\t\trequest(data, socketId=defaultSocketId, type='json') {\n\t\t\tdata.method = data.method || \"get\";\n\n\t\t\treturn new Promise((resolve, reject)=>{\n\t\t\t\tlet id = randomString();\n\t\t\t\tacknowledgements.set(id, createAcknowledge(resolve, reject));\n\t\t\t\tlet message = {type:\"request\", id, data};\n\t\t\t\tlet messageFunction = ()=>{\n\t\t\t\t\tif (parsers.has(type)) {\n\t\t\t\t\t\tconst _message = parsers.get(type)(message);\n\t\t\t\t\t\treturn _message;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new TypeError(`No parser for type ${type}`);\n\t\t\t\t};\n\t\t\t\tsend(messageFunction, socketId);\n\t\t\t});\n\t\t}\n\n\t\trequestJson(data, socketId=defaultSocketId) {\n\t\t\treturn this.request(data, socketId, 'json');\n\t\t}\n\n\t\t/**\n\t\t * Is given socket open and ready?\n\t\t *\n\t\t * @param {string} [socketId=defaultSocketId]\t\tSocket to test for readiness.\n\t\t * @returns {boolean}\t\t\t\t\t\t\t\tIs it ready?\n\t\t */\n\t\tready(socketId=defaultSocketId) {\n\t\t\treturn !!socketReady(socketId);\n\t\t}\n\n\t\t/**\n\t\t * Add an endpoint url for a given id.\n\t\t *\n\t\t * @param {string} id\t\t\t\tThe id set endpoint on.\n\t\t * @param {string} url\t\t\t\tThe endpoint url.\n\t\t * @param {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\taddEndpoint(id, url) {\n\t\t\tendpoints.set(id, url);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * remove an endpoint for a given id.\n\t\t *\n\t\t * @param {string} id\t\t\t\tThe id to remove an endpoint for.\n\t\t * @param {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\tremoveEndpoint(id) {\n\t\t\tendpoints.delete(id);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Add a message parser for given type.\n\t\t *\n\t\t * @param {string} type\t\t\t\tMessage type to add for.\n\t\t * @param {Function} parser\t\t\tParser function to add.\n\t\t * @returns {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\taddParser(type, parser) {\n\t\t\tparsers.set(type, parser);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Remove a parser for a given message type.\n\t\t *\n\t\t * @param {string} type\t\t\t\tMessage type to remove for.\n\t\t * @returns {WebSocketService}\t\tFor chaining.\n\t\t */\n\t\tremoveParser(type) {\n\t\t\tparsers.delete(type);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Get the default socket id.\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tget defaultSocketId() {\n\t\t\treturn defaultSocketId;\n\t\t}\n\n\t\t/**\n\t\t * Get the object type string.\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tget [Symbol.toStringTag]() {\n\t\t\treturn \"WebSocketService\";\n\t\t}\n\t}\n\n\tWebSocketService.DEBUG = false;\n\n\tinit();\n})(window);\n"]}